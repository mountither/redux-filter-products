[{"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/index.js":"1","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reportWebVitals.js":"2","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/App.js":"3","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/store/index.js":"4","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/utils/history.js":"5","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/filterViews/FilterCollection.js":"6","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reducers/index.js":"7","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/saga/index.js":"8","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/actions/index.js":"9","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/initialisation/index.js":"10","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reducers/ProductFilterReducer.js":"11","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/initialisation/filterInfo.js":"12"},{"size":571,"mtime":1614060699745,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1612352402630,"results":"15","hashOfConfig":"14"},{"size":662,"mtime":1614578779784,"results":"16","hashOfConfig":"14"},{"size":632,"mtime":1627000368630,"results":"17","hashOfConfig":"14"},{"size":87,"mtime":1614042383945,"results":"18","hashOfConfig":"14"},{"size":4317,"mtime":1626997228866,"results":"19","hashOfConfig":"14"},{"size":202,"mtime":1626997150486,"results":"20","hashOfConfig":"14"},{"size":3120,"mtime":1626997229736,"results":"21","hashOfConfig":"14"},{"size":955,"mtime":1626997150485,"results":"22","hashOfConfig":"14"},{"size":352,"mtime":1614660403017,"results":"23","hashOfConfig":"14"},{"size":5006,"mtime":1627022831187,"results":"24","hashOfConfig":"14"},{"size":3312,"mtime":1626997150485,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"znqjzb",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/index.js",[],["58","59"],"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reportWebVitals.js",[],"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/App.js",["60","61","62"],"import logo from './logo.svg';\nimport './App.css';\nimport FilterCollection from './filterViews/FilterCollection'\nimport { Switch, Route, Router, Link} from 'react-router-dom';\nimport history from './utils/history'\nimport { connect } from \"react-redux\";\nimport store from './store'\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path='/' render={() => <Link to=\"/products/\">Products</Link>}/>      \n          <Route exact path='/products/' \n            render={() => <FilterCollection />}\n            /> \n\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/store/index.js",["63"],"import { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport mySaga from '../saga'\nimport allReducers from \"../reducers\";\nimport { createLogger } from 'redux-logger'\n\nconst middleware = []\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nmiddleware.push(sagaMiddleware)\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(allReducers,\n    applyMiddleware(...middleware),\n    );\n    \nsagaMiddleware.run(mySaga);\n\nexport default store;","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/utils/history.js",[],"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/filterViews/FilterCollection.js",["64"],"import React, {useState, useEffect} from \"react\";\nimport { Collapse, Spin, Button} from 'antd';\nimport {useSelector, useDispatch} from 'react-redux'\nimport { Checkbox} from 'antd';\nimport { toggleFilter,browserChange,clearFilters} from '../actions';\nimport { Link} from 'react-router-dom'\nimport 'antd/dist/antd.dark.css'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport {pageInit, limitInit} from '../initialisation'\n\n\nconst { Panel } = Collapse;\n\nconst FilterCollection = () =>{\n\n  const dispatch = useDispatch()\n  const state = useSelector(state => state)\n  \n  const {outcome} = state\n  const {isFetching, filters, data, meta} = outcome \n\n    //  using saga instead\n    useEffect(() => {\n\n    dispatch({type:\"INIT_PRODUCTS\"});\n\n    window.onpopstate = (e) => {\n      console.log('pop');\n          if(e.state !== null){\n            dispatch(browserChange(e.state.state))\n          }\n    }\n\n    }, []);\n\n  const onLoadMore = () => {\n    \n    // WATCHED AND MANIPULATED IN REDUX SAGA BEFORE REDUCER\n    dispatch({type:'GET_PRODUCTS', \n      config: {\n                  skip: meta.skip + meta.limit,\n                  limit: limitInit,\n                  page: meta.page + 1,\n                  loadMore: true\n                }\n          });\n\n  }\n  \nconst handleChange = (value, field) => {\n  \n  dispatch(toggleFilter(value.id, field,\n  value.active ? true : false,));\n\n  dispatch({type:'GET_PRODUCTS', \n    config: {skip: 0, limit: limitInit, page: pageInit,}});\n\n}\n\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n\nconst [activeParams, setActiveParams] = useState([]);\nconsole.log('active params', activeParams);\nuseEffect(() => {\n\n  setActiveParams(\n    Object.keys(meta.params).filter(field =>\n      meta.params[field].length > 0)\n  )\n}, [meta.params])\n\n\nreturn (\n       <>\n        <Link to=\"/\">Home</Link>\n\n        <Button onClick={()=>dispatch(clearFilters())}>Clear All</Button>\n        <Collapse\n\n        >\n        { filters &&\n          filters.map((type, i)=> {\n            \n              return (\n                      <Panel \n                        header={type.title}\n                        className={activeParams.includes(type.field_name) ? 'highlight-border': ''}\n                        key={type.field_name}\n                        >\n\n                        {type.input.map((value, i) => {\n                        return (\n                          <Checkbox\n                            key={i}\n                            onChange={() => handleChange(value, type.field_name)}\n                            checked={value.active}>\n                            {value.name}\n                          </Checkbox>\n                          )\n                        })\n                        }\n                      </Panel>\n            )\n          })\n        }\n        </Collapse>\n\n        <Spin indicator={antIcon} spinning={isFetching} delay={500} tip={\"Fetching Products\"}/>\n            {!isFetching && meta.count > 0 && <div style={{position: 'absolute', margin: '0 auto', width: '50%'}}>Amount of products {meta.count}</div>}\n            {meta.count === 0  && <div>No products to show</div>}\n            { data &&\n            data.map(\n                (p,i) => { return (\n                  \n                    <div className=\"tiles-item\" key={i}>\n                        <div className=\"tiles-item-inner center-content\">\n                        <img \n                            // src={p.image}\n                            alt={p.name}\n                            style={{width: \"300px\", height:'300px',}}\n                            />\n                        <div className=\"products-item-content\">\n                        {p.name} <br/>\n                        { p.fragrance ? <p className=\"text-xxs mt-16\">\n                        Smells Like: {p.fragrance}</p> : ''}\n                        <p className=\"text-xs mt-4\">{p.description}</p>\n                        </div>\n                        </div>\n                    </div>\n                        )\n                    }\n                )\n            }\n        {data && !data[meta.count - 1] && !isFetching && meta.count > 0 &&\n          <div className=\"center-content mt-32\"><button onClick={onLoadMore}>Load More</button></div>\n        }   \n      \n      \n</> \n\n    )\n}\n\nexport default FilterCollection\n","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reducers/index.js",["65","66"],"import { combineReducers } from 'redux';\nimport {outcome, fetchedProducts, filterUrl} from './ProductFilterReducer';\n\nconst  allReducers = combineReducers({ \n    outcome\n});\n\nexport default allReducers;","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/saga/index.js",["67","68","69","70","71"],"import { takeEvery, put, select, all, call, fork } from 'redux-saga/effects';\nimport { useLocation} from 'react-router-dom'\nimport {fetchProductsIfNeeded, fetchProducts, initFilters, urlChange, receiveProducts, requestProducts} from '../actions';\nimport qs from \"query-string\";\nimport {limitInit} from '../initialisation'\n\n// this solves the issue of taking query direct from the window location, \n// rather than the redux router state.\n// when the init_app dispatch is used, the router values will be present,\n// we can alter and add the necessary values with this method.\nfunction* initProductsPage() {\n\n    const queryURL = qs.parse(window.location.search,{parseNumbers: true, arrayFormat: 'comma'});\n\n    const pageNo = parseInt(queryURL.page) || 1;\n\n            \n    if(Object.keys(queryURL).length> 0){\n\n        Object.keys(queryURL).map( field =>\n            queryURL[field]= Array.isArray(queryURL[field]) ? queryURL[field] : [queryURL[field]]\n        )\n        \n        yield put(initFilters(queryURL))\n    }        \n\n    yield put({type:'GET_PRODUCTS', \n            config: {\n                skip: 0,\n                limit: limitInit * pageNo,\n                page: pageNo,\n                initUrl: true,\n            }\n    })\n\n    return;\n}\n\n\nexport const getOutcome = (state) => state.outcome\n\nfunction* processProducts(action){\n    console.log('ACTION IN SAGA ',action);\n\n    try {\n        // get the current state \n        let outcome = yield select(getOutcome);\n        \n        // strigfy the params found in state and send in url change\n        const queryFilters = qs.stringify(outcome.meta.params,\n            {arrayFormat: 'comma', skipNull: true, skipEmptyString: true});\n        \n            //call getProducts to return response. \n        const response = yield call(getProducts, queryFilters, action.config)\n\n        // check if success. if so, dispatch actions\n        if (response.status >= 200 && response.status < 300) {    \n            const products = yield response.json()\n            yield put(requestProducts())\n            yield put(receiveProducts(products, action.config, outcome))\n            yield put(urlChange(queryFilters, {\n                    urlConfig: \n                        {\n                            loadMore: action.config.loadMore, \n                            initUrl: action.config.initUrl\n                        }\n                    }))\n        }\n        else{\n            throw response.statusText;\n        }\n\n    } \n    catch (error) {\n        console.log(error);\n    }\n\n}\n\nconst getProducts = (query, config) =>{\n    \n\n    const url = `${process.env.REACT_APP_SERVER}:8000/api/products/?${query}&skip=${config.skip}&limit=${config.limit}`\n    \n    const queryToServer = qs.exclude(url, ['page']);\n    return fetch(queryToServer)\n        .then(response => response)\n}\n\n\n//this the watcher in middleware. \n// focuses on action \"INIT_APP\".\n// watcher saga will include other actions ('REQUEST_PRODUCTS') \nfunction* mySaga() {\n    yield takeEvery(\"INIT_PRODUCTS\", initProductsPage);\n    yield takeEvery(\"GET_PRODUCTS\", processProducts);\n\n}\n\nexport default mySaga;","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/actions/index.js",[],"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/initialisation/index.js",[],"/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/reducers/ProductFilterReducer.js",["72","73"],"import {initState} from '../initialisation'\n\nexport const outcome = (state = initState, action) => {\n    switch (action.type) {\n        case 'INIT_FILTER_UI':\n            // exclude page from params obj, since its not needed after init (page in state will be used)\n            const {page, ...updatedParams} = action.urlFilters\n            return {\n                ...state,\n                meta: {\n                ...state.meta,\n                params: {...state.meta.params, ...updatedParams},\n                },\n                filters: state.filters.map( filter => {\n                    const foundField = Object.keys(action.urlFilters).find(field => \n                        field === filter.field_name\n                    )\n                    if(foundField){\n                        return{\n                        ...filter,\n                        input: filter.input.map((dataInput) => {\n\n                        const foundInput = Array.isArray(action.urlFilters[filter.field_name]) ? \n                            action.urlFilters[filter.field_name].find((input) => input == dataInput.id) \n                            : \n                            action.urlFilters[filter.field_name] === dataInput.id;\n\n                        if(foundInput){\n                            return {\n                            ...dataInput,\n                            active: true,\n                            }\n                        }\n                        return dataInput\n                        }),\n                        }\n                    }\n                    return filter\n                }),\n            }\n        case 'TOGGLE_FILTER':\n            return {\n                ...state,\n                meta: {\n                ...state.meta,\n                params: {\n                    ...state.meta.params,\n                    [action.field]: action.deselect ? state.meta.params[action.field].filter(input => input != action.id)\n                    : [...state.meta.params[action.field], action.id]\n                },\n                status: 'TOGGLING_UI',\n                },\n                filters: state.filters.map((filter) =>{\n                if(filter.field_name === action.field){\n                return {\n                    ...filter,\n                    input: filter.input.map((dataInput) => {\n                    if(dataInput.id === action.id){\n                        return {\n                        ...dataInput,\n                        active: action.deselect ? false : true,\n                        }\n                    }\n                    return dataInput\n                    }),\n                }\n                }\n                return filter;\n            },\n            ),\n            }\n        case 'REQUEST_PRODUCTS':\n            return {\n                ...state,\n                isFetching: true,\n            }\n        case 'RECEIVE_PRODUCTS':\n            console.log('state parrams in recieve',state.meta);\n            return {\n                ...state,\n                meta: {\n                    ...state.meta,\n                    count: action.meta.count,\n                    page: action.meta.page,\n                    skip: action.meta.skip,\n                    limit: action.meta.limit,\n                    loadMore: action.meta.loadMore,\n                    params: action.meta.params,\n                },\n                isFetching: false,\n                data: action.meta.loadMore ? [...state.data, ...action.data]: action.data,\n            }\n        case 'WINDOW_NAV':\n            return action.oldState && Object.keys(action.oldState).length ? action.oldState : state;\n        case 'REGISTER_URL':\n            if(window.history){\n                //  push state keeps old entry in browser. non-mutated state\n                if(!action.initUrl){\n                    window.history.pushState({state: state}, '', `/products/${\n                        Object.keys(state.meta.params).some((filter) => state.meta.params[filter].length) \n                        ? \n                        '?'+action.url: ''}`)\n                }   \n                else{\n                    //  when the page loads without \n                    window.history.replaceState({state: state}, '',  `/products/${\n                        action.url\n                        ?\n                        '?'+action.url: ''}`\n                    )\n                }\n            }\n            // after completing state manip. return current state. If not, the state will not be realised by other actions\n            return state\n\n        case 'APPEND_PAGE_URL':\n            console.log('STATE IN URL CHNA',action.url);\n            if(window.history){\n                window.history.replaceState({state: state}, '', `/products/?${action.url ? action.url+'&': ''}page=${state.meta.page}`)\n            }\n            return state\n        case 'CLEAR_FILTERS':\n            // return {...state, data: [], filters: []}\n            return initState\n        default:\n            return state\n    }\n} \n","/Users/montialrashid/Documents/reactjs/experiments/filter-redux-test-without-url-mw/client/src/initialisation/filterInfo.js",[],["74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":12},{"ruleId":"80","severity":1,"message":"84","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":17},{"ruleId":"80","severity":1,"message":"85","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":13},{"ruleId":"80","severity":1,"message":"86","line":1,"column":27,"nodeType":"82","messageId":"83","endLine":1,"endColumn":34},{"ruleId":"87","severity":1,"message":"88","line":34,"column":8,"nodeType":"89","endLine":34,"endColumn":10,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"91","line":2,"column":18,"nodeType":"82","messageId":"83","endLine":2,"endColumn":33},{"ruleId":"80","severity":1,"message":"92","line":2,"column":35,"nodeType":"82","messageId":"83","endLine":2,"endColumn":44},{"ruleId":"80","severity":1,"message":"93","line":1,"column":34,"nodeType":"82","messageId":"83","endLine":1,"endColumn":37},{"ruleId":"80","severity":1,"message":"94","line":1,"column":45,"nodeType":"82","messageId":"83","endLine":1,"endColumn":49},{"ruleId":"80","severity":1,"message":"95","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":21},{"ruleId":"80","severity":1,"message":"96","line":3,"column":9,"nodeType":"82","messageId":"83","endLine":3,"endColumn":30},{"ruleId":"80","severity":1,"message":"97","line":3,"column":32,"nodeType":"82","messageId":"83","endLine":3,"endColumn":45},{"ruleId":"98","severity":1,"message":"99","line":24,"column":88,"nodeType":"100","messageId":"101","endLine":24,"endColumn":90},{"ruleId":"98","severity":1,"message":"102","line":48,"column":109,"nodeType":"100","messageId":"101","endLine":48,"endColumn":111},{"ruleId":"76","replacedBy":"103"},{"ruleId":"78","replacedBy":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'connect' is defined but never used.","'store' is defined but never used.","'compose' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'fetchedProducts' is defined but never used.","'filterUrl' is defined but never used.","'all' is defined but never used.","'fork' is defined but never used.","'useLocation' is defined but never used.","'fetchProductsIfNeeded' is defined but never used.","'fetchProducts' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["105"],["106"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [dispatch]",{"range":"110","text":"111"},[910,912],"[dispatch]"]